import * as React from "react";
import { Link, useNavigate } from "react-router-dom";
import {
  AddBlogPostDocument, BlogPostIdsQuery,
} from "./__generated__/graphql";
import PostEditor from "./PostEditor";
import { NewBlogPost } from "./types";
import { gql, useMutation } from "@apollo/client";

function SuccessConfirmation() {
  return (
    <div className="Container">
      <h1>Your new post have been saved.</h1>
      <Link className="Button" to="/">
        Home
      </Link>
    </div>
  );
}

/**
 * Das ist der Query, mit dem du den Cache nach allen vorhanden Ids abfragen kannst
 *
 *  - Der TypeScript-Typ für das Ergebnis heißt BlogPostIdsQuery
 */
const blogPostQuery = gql`
  query BlogPostIds {
    posts {
      id
    }
  }
  `
export default function PostEditorPage() {
  const [mutate, { error, data, called, loading }] = useMutation(AddBlogPostDocument);
  const navigate = useNavigate();
  async function savePost(post: NewBlogPost) {
    const { data } = await mutate({
      variables: {
        postData: post
      },
      // todo: implementiere die update Funktion
      //
      //  - Mit `readQuery` die Liste aller  BlogPosts aus dem Cache lesen
      //    - Der Query ist oben schon definiert ("blogPostQuery")
      //    - Der TypeScript-Typ für das Typ-Argument von readQuery ist BlogPostIdsQuery
      //  - Wenn es noch keine Einträge im Cache gibt, erzeuge eine neue Liste,
      //    die nur aus dem neuen BlogPost besteht
      //  - Wenn es bereits Einträge im Cache gibt, füge den BlogPost in die
      //    Liste ein.
      //    - Der neue Post soll am Anfang der Liste stehen
      //    - Achtung: Bestehende Liste nicht verändern, sondern Kopie erzeugen!
      //  - Schreibe die neue Liste mit 'writeQuery' zurück
      //    - Als 'query' kannst Du dafür denselben Query wie bei 'readQuery'
      //      verwenden ("blogPostQuery")
      update(cache, result) {
        const newBlogPost = result.data?.newPost;

        if (!newBlogPost) {
          // Kein neuer Blog-Post
          // Sollte nicht vorkommen, aber um TS zu beruhigen, prüfen wir das hier
          // und verlassen ggf. die Methode
          return;
        }
      },
    });

    if (data?.newPost.blogPost) {
      navigate("/");
    }
  }

  const errorMessage = error ? error.toString() : data?.newPost.error;

  if (called && !errorMessage && !loading) {
    return <SuccessConfirmation />;
  }

  return <PostEditor onSavePost={savePost} error={errorMessage} />;
}
